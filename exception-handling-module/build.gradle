plugins {
    id 'java-library'
    id 'maven-publish'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.github.mahdim1000'
version = '1.0.0'
description = 'Exception Handling Module'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.boot:spring-boot-dependencies:3.5.5'
    }
}

dependencies {
    api 'org.springframework:spring-web'
    api 'org.springframework:spring-context'
    api 'org.springframework:spring-webmvc'
    api 'jakarta.servlet:jakarta.servlet-api'
    api 'com.fasterxml.jackson.core:jackson-annotations'
    api 'org.slf4j:slf4j-api'
    
    compileOnly 'org.springframework.boot:spring-boot-autoconfigure'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Publishing configuration
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            pom {
                name = 'Exception Handling Module'
                description = 'A reusable Spring Boot exception handling module with i18n support'
                url = 'https://github.com/mahdim1000/exception-handling'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'mahdim1000'
                        name = 'Mahdi'
                        email = 'mahdi@example.com'
                    }
                }
            }
        }
    }
    
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/mahdim1000/exception-handling')
            credentials {
                username = project.findProperty('gpr.user') ?: System.getenv('USERNAME')
                password = project.findProperty('gpr.key') ?: System.getenv('TOKEN')
            }
        }
    }
}
